apiVersion: apps/v1
kind: Deployment
metadata:
  name: fileflowmaster-production
  namespace: fileflowmaster
  labels:
    app: fileflowmaster
    environment: production
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: fileflowmaster
      environment: production
  template:
    metadata:
      labels:
        app: fileflowmaster
        environment: production
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fileflowmaster-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: fileflowmaster
        image: ${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fileflowmaster-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: fileflowmaster-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fileflowmaster-secrets
              key: jwt-secret
        - name: REFRESH_TOKEN_SECRET
          valueFrom:
            secretKeyRef:
              name: fileflowmaster-secrets
              key: refresh-token-secret
        - name: ENCRYPTION_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: fileflowmaster-secrets
              key: encryption-master-key
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: fileflowmaster-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: fileflowmaster-secrets
              key: aws-secret-access-key
        - name: S3_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: fileflowmaster-config
              key: s3-bucket-name
        - name: CDN_URL
          valueFrom:
            configMapKeyRef:
              name: fileflowmaster-config
              key: cdn-url
        - name: AUDIT_LOG_DIR
          value: "/app/logs/audit"
        - name: UPLOADS_DIR
          value: "/app/uploads"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: uploads-volume
          mountPath: /app/uploads
        - name: logs-volume
          mountPath: /app/logs
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
              - ALL
      volumes:
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: fileflowmaster-uploads-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: fileflowmaster-logs-pvc
      - name: tmp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fileflowmaster
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: fileflowmaster-service
  namespace: fileflowmaster
  labels:
    app: fileflowmaster
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /health
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: fileflowmaster
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fileflowmaster-config
  namespace: fileflowmaster
data:
  s3-bucket-name: "fileflowmaster-production-files"
  cdn-url: "https://cdn.fileflowmaster.com"
  max-file-size: "100MB"
  allowed-file-types: "image/*,application/pdf,text/*,application/msword,application/vnd.openxmlformats-officedocument.*"

---
apiVersion: v1
kind: Secret
metadata:
  name: fileflowmaster-secrets
  namespace: fileflowmaster
type: Opaque
data:
  database-url: ${DATABASE_URL_BASE64}
  redis-url: ${REDIS_URL_BASE64}
  jwt-secret: ${JWT_SECRET_BASE64}
  refresh-token-secret: ${REFRESH_TOKEN_SECRET_BASE64}
  encryption-master-key: ${ENCRYPTION_MASTER_KEY_BASE64}
  aws-access-key-id: ${AWS_ACCESS_KEY_ID_BASE64}
  aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY_BASE64}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fileflowmaster-uploads-pvc
  namespace: fileflowmaster
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-storage-class
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fileflowmaster-logs-pvc
  namespace: fileflowmaster
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-storage-class
  resources:
    requests:
      storage: 50Gi

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fileflowmaster-hpa
  namespace: fileflowmaster
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fileflowmaster-production
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fileflowmaster-pdb
  namespace: fileflowmaster
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fileflowmaster
      environment: production

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fileflowmaster-service-account
  namespace: fileflowmaster
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/FileFlowMasterRole

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fileflowmaster-ingress
  namespace: fileflowmaster
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - fileflowmaster.com
    - www.fileflowmaster.com
    secretName: fileflowmaster-tls
  rules:
  - host: fileflowmaster.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fileflowmaster-service
            port:
              number: 80
  - host: www.fileflowmaster.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fileflowmaster-service
            port:
              number: 80