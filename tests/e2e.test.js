// FileFlowMaster E2E Test Suite
// Generated by Claude Code for comprehensive application testing

import { test, expect } from '@playwright/test';

test.describe('FileFlowMaster Application Tests', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the application
    await page.goto('http://localhost:5000');
    
    // Wait for the application to load
    await page.waitForTimeout(3000);
  });

  test('should load the homepage successfully', async ({ page }) => {
    // Check that the page loads
    await expect(page).toHaveURL('http://localhost:5000/');
    
    // Check for key UI elements
    await expect(page.locator('[data-testid="sidebar"]')).toBeVisible({ timeout: 10000 });
    await expect(page.locator('[data-testid="main-content"]')).toBeVisible({ timeout: 10000 });
  });

  test('should test user authentication flow', async ({ page }) => {
    // Check if user is authenticated (dev mode should auto-login)
    const userInfo = await page.locator('[data-testid="user-info"]').textContent();
    expect(userInfo).toContain('Dev User');
  });

  test('should test navigation elements', async ({ page }) => {
    // Test sidebar navigation buttons
    await expect(page.locator('button:has-text("Home")')).toBeVisible();
    await expect(page.locator('button:has-text("All projects")')).toBeVisible();
    await expect(page.locator('button:has-text("Project files")')).toBeVisible();
    
    // Test main action buttons
    await expect(page.locator('button:has-text("Upload Files")')).toBeVisible();
  });

  test('should test file upload functionality', async ({ page }) => {
    // Try to click upload button
    const uploadButton = page.locator('button:has-text("Upload")');
    await expect(uploadButton).toBeVisible({ timeout: 10000 });
    
    // Click upload button (may open modal)
    await uploadButton.click();
    
    // Check if upload modal or file picker appears
    // Note: Actual file upload would require a real file
  });

  test('should test search functionality', async ({ page }) => {
    // Test search input
    const searchInput = page.locator('input[placeholder*="Search"]');
    await expect(searchInput).toBeVisible({ timeout: 10000 });
    
    // Type in search box
    await searchInput.fill('test document');
    await searchInput.press('Enter');
    
    // Should trigger search (API call)
  });

  test('should test responsive design - tablet view', async ({ page }) => {
    // Resize to tablet dimensions
    await page.setViewportSize({ width: 768, height: 1024 });
    
    // Check that the layout adapts
    await expect(page.locator('[data-testid="sidebar"]')).toBeVisible();
    
    // Take screenshot for manual verification
    await page.screenshot({ 
      path: 'tests/screenshots/tablet-view.png',
      fullPage: true 
    });
  });

  test('should test responsive design - mobile view', async ({ page }) => {
    // Resize to mobile dimensions
    await page.setViewportSize({ width: 375, height: 667 });
    
    // Check that mobile navigation works
    // May need to click hamburger menu on mobile
    
    // Take screenshot for manual verification
    await page.screenshot({ 
      path: 'tests/screenshots/mobile-view.png',
      fullPage: true 
    });
  });

  test('should test API endpoints indirectly', async ({ page }) => {
    // Monitor network requests
    const responses = [];
    page.on('response', response => {
      if (response.url().includes('/api/')) {
        responses.push({
          url: response.url(),
          status: response.status()
        });
      }
    });
    
    // Refresh page to trigger API calls
    await page.reload();
    await page.waitForTimeout(3000);
    
    // Check that key API endpoints respond successfully
    const authResponse = responses.find(r => r.url.includes('/api/auth/user'));
    expect(authResponse?.status).toBe(200);
    
    const filesResponse = responses.find(r => r.url.includes('/api/files') && !r.url.includes('/recent'));
    expect(filesResponse?.status).toBe(200);
    
    const recentResponse = responses.find(r => r.url.includes('/api/files/recent'));
    expect(recentResponse?.status).toBe(200);
  });

  test('should test error handling', async ({ page }) => {
    // Test navigation to non-existent route
    await page.goto('http://localhost:5000/nonexistent');
    
    // Should handle gracefully (404 or redirect)
    await page.waitForTimeout(2000);
    
    // Check if error page or redirect occurs
    const currentUrl = page.url();
    console.log('Current URL after invalid navigation:', currentUrl);
  });

  test('should test WebSocket connectivity', async ({ page }) => {
    // Monitor WebSocket connections
    let wsConnected = false;
    
    page.on('websocket', ws => {
      console.log('WebSocket connection detected');
      wsConnected = true;
      
      ws.on('close', () => {
        console.log('WebSocket closed');
      });
    });
    
    // Reload page to trigger WebSocket
    await page.reload();
    await page.waitForTimeout(5000);
    
    // WebSocket should be connected for real-time features
    expect(wsConnected).toBe(true);
  });

  test('should test keyboard navigation', async ({ page }) => {
    // Test tab navigation
    await page.keyboard.press('Tab');
    await page.keyboard.press('Tab');
    
    // Test escape key (should close modals if any)
    await page.keyboard.press('Escape');
    
    // Test enter key on focused elements
    const focusedElement = await page.locator(':focus');
    if (await focusedElement.count() > 0) {
      await page.keyboard.press('Enter');
    }
  });
});

// Performance test
test.describe('Performance Tests', () => {
  test('should load within acceptable time', async ({ page }) => {
    const startTime = Date.now();
    
    await page.goto('http://localhost:3000');
    await page.waitForSelector('[data-testid="main-content"], .main-content, main', { timeout: 10000 });
    
    const loadTime = Date.now() - startTime;
    console.log(`Page load time: ${loadTime}ms`);
    
    // Page should load within 5 seconds
    expect(loadTime).toBeLessThan(5000);
  });
});

// Accessibility tests
test.describe('Accessibility Tests', () => {
  test('should have proper ARIA labels', async ({ page }) => {
    await page.goto('http://localhost:3000');
    await page.waitForTimeout(3000);
    
    // Check for ARIA landmarks
    const mainContent = await page.locator('[role="main"], main').count();
    expect(mainContent).toBeGreaterThan(0);
    
    // Check for navigation
    const navigation = await page.locator('[role="navigation"], nav').count();
    expect(navigation).toBeGreaterThan(0);
  });
  
  test('should be keyboard accessible', async ({ page }) => {
    await page.goto('http://localhost:3000');
    await page.waitForTimeout(3000);
    
    // Test tab order
    let tabCount = 0;
    const maxTabs = 20;
    
    while (tabCount < maxTabs) {
      await page.keyboard.press('Tab');
      const focusedElement = await page.locator(':focus');
      
      if (await focusedElement.count() > 0) {
        const tagName = await focusedElement.evaluate(el => el.tagName);
        console.log(`Tab ${tabCount + 1}: ${tagName}`);
      }
      
      tabCount++;
    }
    
    // Should be able to navigate with keyboard
    expect(tabCount).toBe(maxTabs);
  });
});